---
import PostListItem from "../components/PostListItem.astro";
import type { Post } from "../utils/posts";
import { pageSize, orderPosts, pagePosts } from "../utils/posts";
import Pagination from "./Pagination.astro";
const {
  VITE_SITE
} = import.meta.env;

type Props = {
    page?: number | undefined;
    category?: string | undefined;
};
const { page = 1, category } = Astro.props;

let posts: Array<Post> = [];
try {
    posts = await Astro.glob<Post>("../pages/blog/**/*.{mdx,md}");
} catch (e) {
    console.log(e);
}
if (!import.meta.env.DEV) {
    // we use the title filter to exclude strange filesystem imports
    posts = posts.filter((x) => !x.frontmatter.draft && x.frontmatter.title);
}
if (category) {
    posts = posts.filter(
        (x) =>
            x.frontmatter.category &&
            x.frontmatter.category.some((c) => c.toLowerCase() === category)
    );
}

const orderedPosts = orderPosts(posts);
const pagedPosts = pagePosts(orderedPosts, pageSize, page || 1);
const totalPages = Math.ceil(posts.length / pageSize);

const nextBase = category
    ? `/category/${category}/${page + 1}`
    : `/${page + 1}`;
const nextLink = `${VITE_SITE}${totalPages > page ? nextBase : undefined}`;

const prevBase = category
    ? `/category/${category}/${page - 1}`
    : `/${page - 1}`;
const prevLink = `${VITE_SITE}${page > 1 ? prevBase : undefined}`;
---

{
    //we add some padding-top to pages that don't have any heading title (that are paged)
    Astro.props.page !== undefined && <div class="pt-8" />
}
{
    pagedPosts.map((x: Post, i: number) => (
        <PostListItem
            title={x.frontmatter.title}
            summary={x.frontmatter.summary}
            date={x.frontmatter.date}
            category={x.frontmatter.category}
            readingTime={x.readingTime?.text}
            isLast={i === pagedPosts.length - 1}
            url={`${VITE_SITE}${x.url!}`}
        />
    ))
}
<Pagination
    page={page}
    totalPages={totalPages}
    nextLink={nextLink}
    prevLink={prevLink}
/>
